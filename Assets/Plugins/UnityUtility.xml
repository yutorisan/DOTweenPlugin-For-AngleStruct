<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityUtility</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:UnityUtility.UnityExtensions.GetChildTransforms(UnityEngine.MonoBehaviour)" -->
        <member name="T:UnityUtility.VectorExtensions">
            <summary> Vectorに対する拡張メソッド群 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.AddX(UnityEngine.Vector2,System.Single)">
            <summary> Vector2にxを加えてVec3に </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.AddY(UnityEngine.Vector2,System.Single)">
            <summary> Vector2にyを加えてVec3に </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.AddZ(UnityEngine.Vector2,System.Single)">
            <summary> Vector2にzを加えてVec3に </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.DisX(UnityEngine.Vector3)">
            <summary> Vector3からxを除いてVec2に </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.DisY(UnityEngine.Vector3)">
            <summary> Vector3からyを除いてVec2に </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.DisZ(UnityEngine.Vector3)">
            <summary> Vector3からzを除いてVec2に </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.ReX(UnityEngine.Vector3,System.Single)">
            <summary> Vector3のxを上書きしたVec3を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.ReY(UnityEngine.Vector3,System.Single)">
            <summary> Vector3のyを上書きしたVec3を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.ReZ(UnityEngine.Vector3,System.Single)">
            <summary> Vector3のzを上書きしたVec3を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.PlusX(UnityEngine.Vector3,System.Single)">
            <summary>
            Vector3のx要素の値を加算する
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.VectorExtensions.PlusY(UnityEngine.Vector3,System.Single)">
            <summary>
            Vector3のy要素の値を加算する
            </summary>
            <param name="source"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.VectorExtensions.PlusZ(UnityEngine.Vector3,System.Single)">
            <summary>
            Vector3のz要素の値を加算する
            </summary>
            <param name="source"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.VectorExtensions.ReX(UnityEngine.Vector2,System.Single)">
            <summary> Vector2のxを上書きしたVec3を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.ReY(UnityEngine.Vector2,System.Single)">
            <summary> Vector2のyを上書きしたVec3を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.Clamped(UnityEngine.Vector2,System.Single,System.Single)">
            <summary> x,yをそれぞれClamp </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.Theta(UnityEngine.Vector2)">
            <summary> x軸とのなす角[rad]([-π,π]) </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.Resized(UnityEngine.Vector2,System.Single)">
            <summary>
            同じ方向で違う長さのVec2
            - vec2≒0の場合、方向が判別できないためlengthにかかわらず(0,0)を返す
            </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.DisN(System.Nullable{UnityEngine.Vector3},UnityEngine.Vector3)">
            <summary> nullだったらdefaultValueを返す </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.DisN(System.Nullable{UnityEngine.Vector2},UnityEngine.Vector2)">
            <summary> nullだったらdefaultValueを返す </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.DisN0(System.Nullable{UnityEngine.Vector3})">
            <summary> nullだったら(0,0,0)を返す </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.DisN0(System.Nullable{UnityEngine.Vector2})">
            <summary> nullだったら(0,0)を返す </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.Select(UnityEngine.Vector3,System.Func{System.Single,System.Single})">
            <summary> x,y,zそれぞれにprocを適用したVec3(x',y',z')を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.Select(UnityEngine.Vector3,UnityEngine.Vector3,System.Func{System.Single,System.Single,System.Single})">
            <summary> x,y,zそれぞれにproc(x, x2)を適用したVec3(x',y',z')を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.Select(UnityEngine.Vector2,System.Func{System.Single,System.Single})">
            <summary> x,yそれぞれにprocを適用したVec3(x',y')を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.Select(UnityEngine.Vector2,UnityEngine.Vector3,System.Func{System.Single,System.Single,System.Single})">
            <summary> x,yそれぞれにproc(x, x2)を適用したVec3(x',y')を生成 </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.ElemProduct(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary> a=(x0,y0,z0), b=(x1,y1,z1)に対してret=(x0*x1,y0*y1,z0*z1) </summary>
        </member>
        <member name="M:UnityUtility.VectorExtensions.ScaleEx(UnityEngine.Vector3,System.Single)">
            <summary>
            Vector3を全方向に等倍する
            </summary>
            <param name="source"></param>
            <param name="multiple"></param>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.VectorExtensions.ScaleEx(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Vector3を倍率する
            </summary>
            <param name="source"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="T:UnityUtility.UniReadOnly`1">
            <summary>
            一度しか初期化できない値です。
            readonlyキーワードの代わりに使用します。
            </summary>
            <typeparam name="T">ラップする型</typeparam>
        </member>
        <member name="M:UnityUtility.UniReadOnly`1.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isOverwriteIgnoreMode">上書きしようとしたときに例外が発生するのではなく無視するモードの有効無効</param>
        </member>
        <member name="P:UnityUtility.UniReadOnly`1.IsInitialized">
            <summary>
            初期化されているかどうかを取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.UniReadOnly`1.IsOverwriteIgnoreMode">
            <summary>
            上書きしようとしたときに例外が発生するのではなく無視するモードの有効無効
            </summary>
        </member>
        <member name="M:UnityUtility.UniReadOnly`1.Initialize(`0)">
            <summary>
            値を初期化します。このメソッドは一度しか呼ぶことができません。
            </summary>
            <param name="value">初期化する値</param>
            <exception cref="T:UnityUtility.AlreadyInitializedException">複数回初期化しようとしたときにスローされます。</exception>
        </member>
        <member name="M:UnityUtility.EnumExtensions.GetEnumValues``1">
            <summary>
            列挙型のすべてにメンバを取得します。
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="T:UnityUtility.Angle">
            <summary>
            角度
            </summary>
        </member>
        <member name="F:UnityUtility.Angle.m_totalDegree">
            <summary>
            正規化していない角度の累積値
            </summary>
        </member>
        <member name="M:UnityUtility.Angle.#ctor(System.Single)">
            <summary>
            角度を度数法で指定して、新規インスタンスを作成します。
            </summary>
            <param name="angle">度数法の角度</param>
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="M:UnityUtility.Angle.#ctor(System.Int32,System.Single)">
            <summary>
            周回数と角度を指定して、新規インスタンスを作成します。
            </summary>
            <param name="lap">周回数</param>
            <param name="angle">度数法の角度</param>
            <exception cref="T:System.NotFiniteNumberException"/>
            <exception cref="T:System.OverflowException"/>
        </member>
        <member name="M:UnityUtility.Angle.FromDegree(System.Single)">
            <summary>
            度数法の値を使用して新規インスタンスを取得します。
            </summary>
            <param name="degree">度数法の角度(°)</param>
            <returns></returns>
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="M:UnityUtility.Angle.FromDegree(System.Int32,System.Single)">
            <summary>
            周回数と角度を指定して、新規インスタンスを取得します。
            </summary>
            <param name="lap">周回数</param>
            <param name="degree">度数法の角度(°)</param>
            <returns></returns>
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="M:UnityUtility.Angle.FromRadian(System.Single)">
            <summary>
            弧度法の値を使用して新規インスタンスを取得します。
            </summary>
            <param name="radian">弧度法の角度(rad)</param>
            <returns></returns>
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="M:UnityUtility.Angle.FromRadian(System.Int32,System.Single)">
            <summary>
            周回数と角度を指定して、新規インスタンスを取得します。
            </summary>
            <param name="lap">周回数</param>
            <param name="radian">弧度法の角度(rad)</param>
            <returns></returns>
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="P:UnityUtility.Angle.Zero">
            <summary>
            角度0°の新規インスタンスを取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.Round">
            <summary>
            角度360°の新規インスタンスを取得します。
            </summary>
        </member>
        <member name="M:UnityUtility.Angle.Normalize">
            <summary>
            正規化された角度(-180° &lt; degree &lt;= 180°)を取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.Angle.PositiveNormalize">
            <summary>
            正の値で正規化された角度(0° &lt;= degree &lt; 360°)を取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.Angle.Reverse">
            <summary>
            方向を反転させた角度を取得します。
            例：90°→-270°, -450°→630°
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.Angle.SignReverse">
            <summary>
            符号を反転させた角度を取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.Angle.Absolute">
            <summary>
            角度の絶対値を取得します。
            </summary>
            <returns></returns>
        </member>
        <member name="P:UnityUtility.Angle.TotalDegree">
            <summary>
            正規化していない角度値を取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.TotalRadian">
            <summary>
            正規化していない角度値をラジアンで取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.NormalizedDegree">
            <summary>
            正規化された角度値(-180 &lt; angle &lt;= 180)を取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.NormalizedRadian">
            <summary>
            正規化された角度値をラジアン(-π &lt; rad &lt; π)で取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.PositiveNormalizedDegree">
            <summary>
            正規化された角度値(0 &lt;= angle &lt; 360)を取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.PositiveNormalizedRadian">
            <summary>
            正規化された角度値をラジアン(0 &lt;= rad &lt; 2π)で取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.Lap">
            <summary>
            角度が何周しているかを取得します。
            例：370°→1周, -1085°→-3周
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.IsCircled">
            <summary>
            1周以上しているかどうか(360°以上、もしくは-360°以下かどうか)を取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.IsTrueCircle">
            <summary>
            360の倍数の角度であるかどうかを取得します。
            </summary>
        </member>
        <member name="P:UnityUtility.Angle.IsPositive">
            <summary>
            正の角度かどうかを取得します。
            </summary>
        </member>
        <member name="M:UnityUtility.Angle.op_Addition(UnityUtility.Angle,UnityUtility.Angle)">
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="M:UnityUtility.Angle.op_Subtraction(UnityUtility.Angle,UnityUtility.Angle)">
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="M:UnityUtility.Angle.op_Multiply(UnityUtility.Angle,System.Single)">
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="M:UnityUtility.Angle.op_Division(UnityUtility.Angle,System.Single)">
            <exception cref="T:System.NotFiniteNumberException"/>
        </member>
        <member name="M:UnityUtility.Angle.ArithmeticCheck(System.Func{System.Single})">
            <summary>
            演算結果が数値であることを確かめる
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.Linq.LinqExtensions.Debug``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            IEnumerableシーケンスのすべての値をDebug.Logで出力します
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="label">指定した文字列が先頭に[]囲みで出力されます</param>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.Linq.LinqExtensions.Debug``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.String)">
            <summary>
            IEnumerableシーケンスのすべての値をDebug.Logで出力します
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector">出力するオブジェクトを指定します</param>
            <param name="label">指定した文字列が先頭に[]囲みで出力されます</param>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.Linq.LinqExtensions.ProcessIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0},System.Boolean)">
            <summary>
            条件に一致する場合、シーケンスの要素に型が不変の任意の処理を加えて後続に流します。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="process">型が不変の任意の処理</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:UnityUtility.Linq.LinqExtensions.ProcessIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0},System.Predicate{``0})">
            <summary>
            シーケンスの各要素が条件に一致する場合、型が不変の任意の処理を加えて後続に流します。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="process">型が不変の任意の処理</param>
            <param name="predicate">シーケンスの要素に適用する条件</param>
            <returns></returns>
        </member>
    </members>
</doc>
